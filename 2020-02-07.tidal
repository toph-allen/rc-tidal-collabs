setcps (150/60/4)

setcps (130/60/4)



do
  p "metronome" $ sound "click:3 click:2 click:2 click:2"
    # gain "0.9 0.6 0.6 0.6"
  p "kick" -- pattern $ sample # effects
    -- $ gain "[1 1]"
    -- $ cat[
    --   gain "[1 . ~ . 1 . ~]",
    --   gain "[1 . ~ . 1 . ~ ~ 0.8 ~]"
    -- ]
    -- $ cat[
    --   gain "[1 0.9 . ~ . 1 . ~]",
    --   gain "[1 0.9 . ~ . 1 . ~ ~ 0.8 ~]"
    -- ]
    -- "<[1 . ~ . 1 . ~][1 . ~ . 1 . ~ ~ 0.8 ~]>"
    $ gain "[1 ~ ~ 1 . ~ ~ 1 ~ ]*2"
    # sound "808bd:3"
    -- # sound "super808" # voice 0 # n 3 # sustain 0.5 # lpf 200
  p "clap"
    $ ". . . 1"
    # sound "808:3"
    # gain 0.9
  p "closed hat"
    -- $ fast 1 $ "[~ ~ 1 ~ ]*2"
    $ "~ ~ <1 [1 1 1]> ~ . ~ ~ 1 1 . ~ ~ 1 ~ . ~ ~ 1 ~"
    # sound "808:1"
  p "rimshot"
    -- $ silence
    $ slowcat [
      "[1 1 1 1]*4",
      "[1 1 1 1]*4",
      "[1 1 1 1]*4",
      "[1 1 1 1 . 1 1 1 1 . 1 1 1 1 . 1 1 1 [1 1]]"
    ]
    # sound "808:5"
    # speed (rand * 0.2 + 2.97)
    # gain (rand * 0.1 + 0.9)
    # attack 0.01
    -- # octer 8
    -- If 'gain' comes after 'speed' it applies to the whole
    -- cycle, but if it comes before 'speed' it applies to each
    -- note. I don't understand.
    -- Update: It's to do with parens.



do
  p "bass 1"
    -- $ spread fast[sine]
    -- $ slow 1.5
    $ n "d3"
    -- $ n (arp "updown" "d3'min'6")
    -- >| "1 ~ . ~ <1 0> . . ~ 1 ~ 1"
    # sound "supersquare" # voice 0.3
    # attack 0.00 # hold (1 / 12) # decay 0.1 # release 0.1
    -- # distort 0.5
    -- # lpf ((range 400 800 (slow 16 (sine))) + (rand * 50))
    -- # resonance (range 0.25 0.4 (slow 0.7 (cosine)))
    -- # hpf 0
    # gain 0.7
    -- # squiz 1.2
    -- # fshift 5
      -- # enhance 1
  p "bass 2"
    -- $ spread fast[sine]
    $ n "d2"
    -- $ n (arp "updown" "d2'min'6")
    >| "1 ~ . ~ 1 . . ~ 1 ~ 1"
    -- >| "1 1 1 1 [1 ~ 1]"
    # sound "supersaw" # voice 0
    # attack 0.00 # hold (1 / 12) # decay 0.8 # release "0.2 0.1 0.1 0.1"
    -- # distort 0.5
    # lpf ((range 400 800 (slow 16 (sine))) + (rand * 50))
    -- # resonance (range 0.25 0.4 (slow 0.7 (cosine)))
    -- # hpf 0
    # gain 0.8
    -- # squiz 1.2
    -- # fshift 5
    -- # delay 0.8

  p "notes 2"
    -- $ spread fast[sine]
    $ slow 2
    $ stack [
      n (arp "updown" "bf6'maj'5"),
      n (arp "updown" "bf3'maj'6")
      ]
    >| "1 ~ 1 ~ [1 ~ 1]"
    # sound "supermandolin" # voice 0
    # distort 0.2
    -- # lpf ((range 400 1200 (slow 4 (sine))) + (rand * 50))
    -- # resonance (range 0.25 0.4 (slow 4 (cosine)))
    -- # hpf 0
    -- # gain 0.7
    -- # squiz 1.2
    -- # fshift 5


# gain 1
  |+| up "0(3,5), 5(5,8)"

p "notes" $
  -- spread fast[2,2,2,3] $
  -- gain "1 1 1" #
  fast 3 $
  n (arp "up" "d4'ninesus4:6") #
  -- n "d4'ninesus4" # -- the note function is doing something to look up the chords
  -- midinote (take 4 Sound.Tidal.Chords.nineSus4) #
  s "supermandolin"

p "notes" $ silence

chordList

(arp "up" "d4'ninesus4")

n (take 4 Sound.Tidal.Chords.nineSus4)

-- You can access the notes in a chord with:

-- How do we just take the first four notes of a chord??
p "notes" $
  -- spread fast[2,2,2,3] $
  n (arp "up" "d4'ninesus4") #
  note "d4" Sound.Tidal.Chords.nineSus4
  -- n midinote "d1'ninesus4"
  s "supermandolin"

hush
